import org.w3c.dom.Element

String property(String name) {
    return project.getProperty(name)
}

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

repositories {
    maven {
        name 'LDTTeam - Modding'
        url 'https://ldtteam.jfrog.io/ldtteam/modding/'
    }
    maven {
        url "https://maven.tehnut.info"
    }
    maven {
        url "https://www.cursemaven.com"
    }
    maven {
        url "https://harleyoconnor.com/maven"
    }
    flatDir {
        dirs("libs")
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

String modName = property("modName")
String modVersion = property("modVersion")
String mcVersion = property("mcVersion")

version = "${mcVersion}-${modVersion}"
group = property("group")
archivesBaseName = modName

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {
    mappings channel: 'official', version: mcVersion

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            if (project.hasProperty('mcUuid')) {
                args '--uuid', property('mcUuid')
            }
            if (project.hasProperty('mcUsername')) {
                args '--username', property('mcUsername')
            }
            if (project.hasProperty('mcAccessToken')) {
                args '--accessToken', property('mcAccessToken')
            }

            mods {
                dtupgradeaquatic {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                dtupgradeaquatic {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            args '--mod', 'dtupgradeaquatic',
                    '--all',
                    '--output', file('src/generated/resources/'),
                    '--existing', file('src/main/resources')

            mods {
                dtupgradeaquatic {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mcVersion}-${property("forgeVersion")}"

    // Temp as TehNut Maven is down.
    implementation(fg.deobf("curse.maven:hwyla-253449:3033593"))
//    compileOnly fg.deobf("mcp.mobius.waila:Hwyla:${property("hwylaVersion")}:api")
//    runtimeOnly fg.deobf("mcp.mobius.waila:Hwyla:${property("hwylaVersion")}")

    compileOnly fg.deobf("mezz.jei:jei-${mcVersion}:${property("jeiVersion")}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mcVersion}:${property("jeiVersion")}")

    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${property("patchouliVersion")}")

    implementation fg.deobf("com.ferreusveritas.dynamictrees:DynamicTrees-${mcVersion}:${property("dynamicTreesVersion")}")
    runtimeOnly fg.deobf("com.ferreusveritas.dynamictreesplus:DynamicTreesPlus-${mcVersion}:${property("dynamicTreesPlusVersion")}")

    implementation fg.deobf("curse.maven:abnormals-core-382216:3607198") // Note: now called Blueprint in newer versions
    implementation fg.deobf("curse.maven:upgrade-aquatic-326895:3561148")

    runtimeOnly fg.deobf("curse.maven:cc-tweaked-282001:3236650")

    runtimeOnly fg.deobf("com.harleyoconnor.suggestionproviderfix:SuggestionProviderFix:${mcVersion}-${property("suggestionProviderFixVersion")}")
}

jar {
    manifest {
        attributes([
                "Specification-Title": project.name,
                "Specification-Vendor": "Max Hyper",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": version,
                "Implementation-Vendor" : "Max Hyper",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allJava
}

jar.finalizedBy('reobfJar')

java {
    withSourcesJar()
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

idea {
    module {
        downloadSources = true
    }
}
